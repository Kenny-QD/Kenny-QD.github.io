////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
var array = [];
// create conditional to test if start is equal to end
if(start === end) {
  return array;
  //return empty array if numbers are the same
    //if no step is listed, count by 1
    } else if (step === undefined){
      for (let i = start; i <= end; i++)
        array.push(i);
    //count by step if it is greater than 0    
    }else if (step > 0) {
      for (let i = start; i <= end; i += step)
        array.push(i);
    //if step is negative, count backwards from start to end  
    } else {
      for (let i = start; i >= end; i += step)
        array.push(i);
    }
    return array;
}
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
let totalsum = 0;
for( let i = 0; i < array.length; i++){
  let num = array[i];
  totalsum += num;
}
return totalsum;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  // create a array storage
  var arrayReverse = [];
  // create a loop
  for (var i = 0; i < array.length; i++){
    // unshift the elements 
    arrayReverse.unshift(array[i]);
    // return the arrayReverse
  }return arrayReverse;

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  for ( var i = 0; i <= Math.floor((array.length - 1) / 2); i++){
    let newVar = array[i];
    array[i] = array[array.length - 1 - i];
    array[array.length - 1 - i] = newVar;
  }
return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let result = null;
  for(var i = array.length - 1; i >= 0; i--){
    result = {value: array[i], rest:  result};
  }
return result;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
const result = [];
for(let i = list; i; i = i.rest){
  result.push(i.value);
}
return result;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  return {value, rest: list};
};


////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) {
//if no such element return undefined
  if(!list){
    return undefined;
  }
  //if num is 0 return the first element
  else if(num === 0){
    return list.value;
  }
  else{
    return nth(list.rest, num - 1);
  }
}


////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
if( a === b) {
  return true;
}
if (a === null || typeof a !== "object" || b === null |typeof b !== "object"){
  return false;
}
let keyA = Object.keys(a), keyB = Object.keys(b);
if (keyA.length !== keyB.length){
  return false;
}
for (let key of keyA){
  if(!keyB.includes(key) || !deepEqual(a[key], b[key])){
    return false;
  }
}
return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
}
